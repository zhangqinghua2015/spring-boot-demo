# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy with docker

on:
  workflow_dispatch
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8.0'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn package -Dmaven.test.skip=true

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
    # 登录Docker Hub
    - name: Build the Docker image
      env:
          IMAGE_TAG: ${{ github.sha }}
          # IMAGE_TAG: ${{ steps.commit_hash.outputs.commit_hash }}
      run: |
        echo ${{ github.sha }}
        docker version
        # 登录阿里云镜像仓库
        docker login --username=${{ secrets.DOCKER_HUB_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
        # cd spring-boot-demo
        mkdir docker
        cp ./Dockerfile ./docker
        cp ./target/spring-boot-demo-0.0.1-SNAPSHOT.jar ./docker/spring-boot-demo.jar
        cd docker
        # 使用Dockerfile构建镜像
        docker build . --file Dockerfile --tag ${{ vars.HUBADDR }}/${{ vars.USER_NAME }}/${{ vars.IMAGE_NAME }}:$IMAGE_TAG
        # 推送镜像到镜像仓库
        docker push ${{ vars.HUBADDR }}/${{ vars.USER_NAME }}/${{ vars.IMAGE_NAME }}:$IMAGE_TAG
    - name: update deployment tag
      run: |
        sed -i 's/latest/${{ github.sha }}/g' deployment.yaml
        git config --global user.email "workflow"
        git config --global user.name "workflow"
        git add ./deployment.yaml
        git commit -m "update"
    - name: save results
      uses: ad-m/github-push-action@master
      with:
        # github_token: ${{ secrets.GH_TOKEN }}
        # repository: ${{ secrets.GH_PATH }}
        directory: .
        branch: deployment
        force: true
    # push后，用ssh连接服务器执行脚本    
    # - name: 登录服务器, 执行脚本
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SSH_REMOTE_HOST }}
    #     port: ${{ secrets.SSH_PORT }}
    #     username: ${{ secrets.SSH_USER }}
    #     password: ${{ secrets.SSH_PASSWORD }}
    #     # 执行脚本
    #     script: |
    #       # 部署脚本 后面的vars是传递给脚本的参数
    #       sh /root/script/deploy.sh ${{ vars.USER_NAME }} ${{ vars.IMAGE_NAME }} ${{ vars.PORT }} ${{ vars.CONTAINS_PORT }} ${{ vars.hubAddr }} ${{ vars.tag }}
